// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "fem_b_gui.h"
#include <iostream>
#include <assert.h>
#include <fstream>
#include <string.h>

Fl_Double_Window *main_window=(Fl_Double_Window *)0;

Fl_Group *bc_set=(Fl_Group *)0;

Fl_Round_Button *iso_button=(Fl_Round_Button *)0;

static void cb_iso_button(Fl_Round_Button*, void*) {
  if (iso_button->value()) {
adia_button->value(0);
} else {
adia_button->value(1);
};
}

Fl_Round_Button *adia_button=(Fl_Round_Button *)0;

static void cb_adia_button(Fl_Round_Button*, void*) {
  if (adia_button->value()) {
iso_button->value(0);
} else {
iso_button->value(1);
};
}

Fl_Input *wall_temp=(Fl_Input *)0;

Fl_Input *in_temp=(Fl_Input *)0;

Fl_Input *out_p=(Fl_Input *)0;

Fl_Group *gas_set=(Fl_Group *)0;

Fl_Input *gas_tc=(Fl_Input *)0;

Fl_Input *gas_dens=(Fl_Input *)0;

Fl_Input *gas_sh=(Fl_Input *)0;

Fl_Input *gas_visc=(Fl_Input *)0;

Fl_Input *gas_mf=(Fl_Input *)0;

Fl_Group *chem_set=(Fl_Group *)0;

Fl_Input *rx_rate=(Fl_Input *)0;

Fl_Input *fuel_h=(Fl_Input *)0;

Fl_Group *mesh_set=(Fl_Group *)0;

Fl_Input *x_elem=(Fl_Input *)0;

Fl_Input *y_elem=(Fl_Input *)0;

Fl_Group *time_set=(Fl_Group *)0;

Fl_Input *duration=(Fl_Input *)0;

Fl_Input *timestep=(Fl_Input *)0;

Fl_Button *submit=(Fl_Button *)0;

static void cb_submit(Fl_Button*, void*) {
  char Tw_str, Ti_str, TC_str, dens_str, *SH_str, *visc_str, *MF_str; //Po_str
char *RX_str, *Hfuel_str, *El_x_str, *El_y_str, *dur_str, *timestep_str;
char *input_str, *mesh_str;
bool adia_iso;

if (iso_button->value()) {
adia_iso = false;
} else if (adia_button->value()) {
adia_iso = true;
} else {
adia_iso = false;
}

if (wall_temp->value()) {
Tw_str, wall_temp->value());
} else {
strcpy(Tw_str,"300");
}

if (in_temp->value()) {
strcpy(Ti_str, in_temp->value());
} else {
strcpy(Ti_str,"300");
}

// if (out_p->value()) {
// strcpy(Po_str, out_p->value());
// } else {
// strcpy(Po_str,"300");
// }

if (gas_tc->value()) {
strcpy(TC_str, gas_tc->value());
} else {
strcpy(TC_str,"300");
}

if (gas_dens->value()) {
strcpy(dens_str, gas_dens->value());
} else {
strcpy(dens_str,"300");
}

if (gas_sh->value()) {
strcpy(SH_str, gas_sh->value());
} else {
strcpy(SH_str,"300");
}

if (gas_visc->value()) {
strcpy(visc_str, gas_visc->value());
} else {
strcpy(visc_str,"300");
}

if (gas_mf->value()) {
strcpy(MF_str, gas_mf->value());
} else {
strcpy(MF_str,"300");
}

if (rx_rate->value()) {
strcpy(RX_str, rx_rate->value());
} else {
strcpy(RX_str,"300");
}

if (fuel_h->value()) {
strcpy(Hfuel_str, fuel_h->value());
} else {
strcpy(Hfuel_str,"300");
}

if (x_elem->value()) {
strcpy(El_x_str, x_elem->value());
} else {
strcpy(El_x_str,"300");
}

if (y_elem->value()) {
strcpy(El_y_str, y_elem->value());
} else {
strcpy(El_x_str,"300");
}

if (duration->value()) {
strcpy(dur_str, duration->value());
} else {
strcpy(dur_str,"300");
}

if (timestep->value()) {
strcpy(timestep_str, fuel_h->value());
} else {
strcpy(timestep_str,"300");
}

if (in_file->value() > 0) {
strcpy(input_str,in_file->text(in_file->value()));
std::cout << input_str << std::endl;
} else {
strcpy(input_str,new_file->value());
}

if (mesh_file->value() > 0) {
strcpy(mesh_str,mesh_file->text(mesh_file->value()));
std::cout << mesh_str << std::endl;
} else {
strcpy(mesh_str,"default_mesh.e");
}

std::ofstream outfile(input_str,std::ios::out);

std::cout << "file opened" << std::endl;

assert(outfile.is_open());

outfile << "[//]" << timestep_str << std::endl;
}

Fl_File_Browser *in_file=(Fl_File_Browser *)0;

Fl_File_Browser *mesh_file=(Fl_File_Browser *)0;

Fl_Input *new_file=(Fl_Input *)0;

Fl_Double_Window* make_window() {
  { main_window = new Fl_Double_Window(678, 749, "Laminar Combustion Input File Generator");
    { bc_set = new Fl_Group(190, 30, 475, 475, "Boundary Conditions");
      { iso_button = new Fl_Round_Button(510, 120, 25, 25, "Isothermal");
        iso_button->down_box(FL_ROUND_DOWN_BOX);
        iso_button->callback((Fl_Callback*)cb_iso_button);
        iso_button->align(Fl_Align(FL_ALIGN_LEFT));
        iso_button->when(FL_WHEN_CHANGED);
      } // Fl_Round_Button* iso_button
      { adia_button = new Fl_Round_Button(510, 140, 25, 25, "Adiabatic");
        adia_button->down_box(FL_ROUND_DOWN_BOX);
        adia_button->callback((Fl_Callback*)cb_adia_button);
        adia_button->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Round_Button* adia_button
      { wall_temp = new Fl_Input(510, 45, 130, 25, "Wall Temperature");
      } // Fl_Input* wall_temp
      { in_temp = new Fl_Input(510, 70, 130, 25, "Inlet Temperature");
      } // Fl_Input* in_temp
      { out_p = new Fl_Input(510, 95, 130, 25, "Outlet Pressure");
      } // Fl_Input* out_p
      bc_set->end();
    } // Fl_Group* bc_set
    { gas_set = new Fl_Group(185, 186, 475, 473, "Gas Settings");
      { gas_tc = new Fl_Input(510, 211, 130, 25, "Thermal Conductivity");
      } // Fl_Input* gas_tc
      { gas_dens = new Fl_Input(510, 235, 130, 25, "Density");
      } // Fl_Input* gas_dens
      { gas_sh = new Fl_Input(510, 260, 130, 25, "Specific Heat");
      } // Fl_Input* gas_sh
      { gas_visc = new Fl_Input(510, 285, 130, 25, "Viscosity");
      } // Fl_Input* gas_visc
      { gas_mf = new Fl_Input(510, 310, 130, 25, "Percent Fuel");
      } // Fl_Input* gas_mf
      gas_set->end();
    } // Fl_Group* gas_set
    { chem_set = new Fl_Group(185, 363, 475, 477, "Chemistry Settings");
      { rx_rate = new Fl_Input(510, 393, 130, 25, "Reaction Rate");
      } // Fl_Input* rx_rate
      { fuel_h = new Fl_Input(510, 415, 130, 25, "Enthalpy of Fuel");
      } // Fl_Input* fuel_h
      chem_set->end();
    } // Fl_Group* chem_set
    { mesh_set = new Fl_Group(185, 475, 475, 475, "Mesh Settings");
      { x_elem = new Fl_Input(510, 490, 130, 25, "Elements (X)");
      } // Fl_Input* x_elem
      { y_elem = new Fl_Input(510, 515, 130, 25, "Elements (Y)");
      } // Fl_Input* y_elem
      mesh_set->end();
    } // Fl_Group* mesh_set
    { time_set = new Fl_Group(185, 575, 475, 675, "Time Settings");
      { duration = new Fl_Input(510, 600, 130, 25, "Duration");
      } // Fl_Input* duration
      { timestep = new Fl_Input(510, 625, 130, 25, "Timestep");
      } // Fl_Input* timestep
      time_set->end();
    } // Fl_Group* time_set
    { submit = new Fl_Button(527, 708, 100, 25, "Submit");
      submit->callback((Fl_Callback*)cb_submit);
    } // Fl_Button* submit
    { in_file = new Fl_File_Browser(26, 105, 310, 235, "Input File Location");
      in_file->load(".");
      in_file->type(FL_HOLD_BROWSER);
    } // Fl_File_Browser* in_file
    { mesh_file = new Fl_File_Browser(26, 424, 310, 235, "Mesh File Location");
      mesh_file->load(".");
      mesh_file->type(FL_HOLD_BROWSER);
    } // Fl_File_Browser* mesh_file
    { new_file = new Fl_Input(177, 364, 161, 25, "New Input File Name");
    } // Fl_Input* new_file
    main_window->end();
  } // Fl_Double_Window* main_window
  return main_window;
}
